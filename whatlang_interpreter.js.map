{
  "version": 3,
  "sources": ["whatlang_interpreter.ts"],
  "sourcesContent": ["const op : Record<string, (x : any, y : any) => any> = {\n    \"+\": (x, y) => (x + y),\n    \"-\": (x, y) => (x - y),\n    \"*\": (x, y) => (x * y),\n    \"/\": (x, y) => (x / y),\n    \"%\": (x, y) => (x % y),\n    \"?\": (x, y) => x == y ? 0 : +(x > y) - +(x < y) || NaN,\n}\n\nconst relize = (x : string) => Array.isArray(x) ? new RegExp(x[0], x[1]) : x\n\nexport var default_var_dict : Record<string, any> = ({\n    num: (x : any) => Number(x),\n    str: (x : any) => (\n      Array.isArray(x) && x.every(i => typeof i == \"string\" && i.length == 1)\n      ? x.join(\"\") : formatting(x)\n    ),\n    repr: (x : any) => repr_formatting(x),\n    arr: (x : any) => [...x],\n    pow: (x : any, y : any) => x ** y,\n    sin: (x : any) => Math.sin(x),\n    cos: (x : any) => Math.cos(x),\n    tan: (x : any) => Math.tan(x),\n    asin: (x : any) => Math.asin(x),\n    acos: (x : any) => Math.acos(x),\n    atan: (x : any) => Math.atan(x),\n    band: (x : any, y : any) => x & y,\n    bor: (x : any, y : any) => x | y,\n    bxor: (x : any, y : any) => x ^ y,\n    bnot: (x : any) => ~x,\n    rand: () => Math.random(),\n    randint: (x : any, y : any) => Math.floor((Math.random() * (x - y)) + y),\n    flr: (x : any) => Math.floor(x),\n    range: (x : any) => [...Array(x).keys()],\n    len: (s : any[][]) => [...s.at(-1).at(-1)].length,\n    split: (x : any, y : any) => (typeof x == \"string\" ? x : formatting(x)).split(y),\n    join: (x : any, s : any[][]) => ([...s.at(-1).at(-1)]\n        .map(i => typeof i == \"string\" ? i : formatting(i))\n        .join(x)\n    ),\n    reverse: (s : any[][]) => [...s.at(-1).at(-1)].reverse(),\n    in: (x : any, s : any[][]) => [...s.at(-1).at(-1)].indexOf(x),\n    filter: async (\n        x : any,\n        s : any[][],\n        v : Record<string, any>,\n        o : (x : any) => void,\n    ) => (await [...s.at(-1).at(-1)].reduce(async (memo : any, i : any) => (\n        [...await memo, [i, await exec_what([...s.slice(0, -1), s.at(-1).concat([i, x])], v, o)]]\n    ), [])).filter(i => i[1] || Number.isNaN(i[1])).map(i => i[0]),\n    chr: (x : any) => Array.isArray(x) ? String.fromCodePoint(...x) : String.fromCodePoint(x),\n    ord: (x : any) => [...typeof x == \"string\" ? x : formatting(x)].map(i => i.codePointAt(0)),\n    and: (x : any, y : any) => Number.isNaN(x) ? y : x && y,\n    or: (x : any, y : any) => Number.isNaN(x) ? x : x || y,\n    nan: () => NaN,\n    undef: (s : any[][]) => void s.at(-1).push(undefined),\n    inf: () => Infinity,\n    ninf: () => -Infinity,\n    eq: (x : any, y : any) => +(x === y),\n    stak: (s : any[][]) => s.at(-1),\n    stack: (s : any[][]) => [...s.at(-1)],\n    try: async (\n        s : any[][],\n        v : Record<string, any>,\n        o : (x : any) => void,\n    ) => {\n        let temp : string[] = [undefined, undefined]\n        try {\n            await exec_what(s, v, o)\n        } catch (e) {\n            temp = [e.name, e.message]\n        }\n        return temp\n    },\n    throw: (x : any) => {throw new Error(x)},\n    match: (x : any, y : any) => [...x.match(relize(y)) || []],\n    repl: (x : any, y : any, z : any) => x.replace(relize(y), z),\n    time: () => Date.now(),\n    type: (x : any) => x == undefined ? \"Undefined\" : x.constructor.name,\n})\nexport var need_svo : string[] = \"filter try\".split(\" \")\nexport var need_fstack : string[] = \"len join reverse in stak stack undef\".split(\" \")\n\nexport const formatting : (x : any) => string = (x : any) => {\n    if (Array.isArray(x)) {\n        return \"[\" + x.map(\n            i => Array.isArray(i) && i == x ? \"[...]\" : formatting(i)\n        ).join(\", \") + \"]\"\n    } else if (typeof x == \"string\") {\n        return '\"' + (x\n            .replace(/\"/g, '\\\\\"')\n            .replace(/\\n/g, '\\\\n')\n            .replace(/\\t/g, '\\\\t')\n        ) + '\"'\n    } else if (x == undefined) {\n        return \"undef\"\n    } else if (Number.isNaN(x)) {\n        return \"NaN\"\n    } else if (x == Infinity) {\n        return \"Inf\"\n    } else if (x == -Infinity) {\n        return \"-Inf\"\n    }\n    return String(x)\n}\n\nconst is_valid_paren_string = (x : string) : boolean => {\n    let depth = 0\n    for (const c of x) {\n        if (c === \"(\") depth++\n        else if (c === \")\") depth--\n        if (depth < 0) return false\n    }\n    return depth === 0\n}\n\nconst repr_formatting : (x : any) => string = (x : any) => {\n    if (Array.isArray(x)) {\n        return \"[\" + x.map(\n            i => Array.isArray(i) && i == x ? \"stack@\" : repr_formatting(i)\n        ).join(\" \") + \"]\"\n    } else if (typeof x == \"string\") {\n        if (/^[a-zA-Z][a-zA-Z0-9_]*$/.test(x)) return x\n        else if (is_valid_paren_string(x)) return \"(\" + x + \")\"\n        else return '\"' + (x\n            .replace('\"', '\\\\\"')\n            .replace('\\n', '\\\\n')\n            .replace('\\t', '\\\\t')\n        ) + '\"'\n    } else if (x === undefined) {\n        return \"undef@\"\n    } else if (Number.isNaN(x)) {\n        return \"nan@\"\n    } else if (x == Infinity) {\n        return \"inf@\"\n    } else if (x == -Infinity) {\n        return \"ninf@\"\n    } else if (typeof x == \"number\") {\n        if (\n           x < 0 || x >= 1.0e+21 ||\n           !Number.isInteger(x)\n        ) return \"(\" + String(x) + \")num@\"\n        return String(x)\n    }\n    return \"${\" + String(x) + \"}\"\n}\n\nexport const exec_what = async (\n    fstack : any[][],\n    var_dict : Record<string, any>,\n    output : (x : any) => void,\n    { dead_loop_check = () => {} } = {}\n) => {\n    var stack : any[] = fstack.at(-1)\n    let temp : any, temp2 : any, temp3 : any\n    //I should stop temping\n    temp = stack.pop()\n    if (temp in var_dict && typeof var_dict[temp] === \"function\") {\n        temp3 = (\n            need_svo.includes(temp) ? 3 :\n            need_fstack.includes(temp) ? 1 :\n            0\n        )\n        temp = var_dict[temp]\n        temp2 = [fstack, var_dict, output]\n        temp2.splice(temp3)\n        temp2 = (temp.length > temp3 ? stack.splice(temp3 - temp.length) : []).concat(temp2)\n        temp = await temp(...temp2)\n        if (temp != undefined) stack.push(temp)\n    } else {\n        temp2 = temp in var_dict ? var_dict[temp] : temp\n        await eval_what(temp2, fstack, var_dict, output, { dead_loop_check })\n    }\n    return stack.at(-1)\n}\nexport const run_what = async (\n    code : string,\n    var_dict : Record<string, any> = default_var_dict,\n    { dead_loop_check = () => {} } = {}\n) => {\n    let output : string = \"\"\n    let stack : any = await eval_what(\n        code, [[]],\n        Object.assign({}, var_dict),\n        (x : any) => {output += x},\n        { dead_loop_check }\n    )\n    return ({\n        stack: stack,\n        output: output,\n    })\n}\n\nexport const eval_what = async (\n    code : string, fstack : any[][],\n    var_dict : Record<string, any>,\n    output : (x : any) => void,\n    { dead_loop_check = () => {} } = {}\n) => {\n    var stack : any[] = fstack.at(-1)\n    let i : number = -1, c : string\n    let temp : any, temp2 : any\n    while (++i < code.length) {\n        dead_loop_check()\n        c = code[i]\n        if (/\\s/.test(c)) {\n            continue\n        } else if (/[1-9]/.test(c)) {\n            temp = 0\n            do {\n                temp = temp * 10 + Number(c)\n                c = code[++i]\n            } while (c && /\\d/.test(c))\n            c = code[--i]\n            stack.push(temp)\n        } else if ('0' === c) {\n            stack.push(0)\n        } else if (/[a-zA-Z]/.test(c)) {\n            temp = \"\"\n            do {\n                temp += c\n                c = code[++i]\n            } while (c && /[a-zA-Z0-9_]/.test(c))\n            c = code[--i]\n            stack.push(temp.toLowerCase())\n        } else if (\"'\" === c) {\n            stack.push(c = code[++i])\n        } else if (/[\"`]/.test(c)) {\n            temp = \"\"\n            temp2 = c\n            c = code[++i]\n            while (c) {\n                if (\"\\\\\" === c) {\n                    c = code[++i]\n                    temp += ({\n                        \"n\": \"\\n\",\n                        \"t\": \"\\t\",\n                        [temp2]: temp2\n                    })[c] ?? c\n                } else if (temp2 === c) break\n                else temp += c\n                c = code[++i]\n            }\n            if ('\"' === temp2) {\n                stack.push(temp)\n            } else if ('`' === temp2) {\n                output(temp)\n            }\n        } else if (c in op) {\n            temp = stack.pop()\n            stack.push(op[c](stack.pop(), temp))\n        } else if ('~' === c) {\n            temp = stack.pop()\n            stack.push(Number.isNaN(temp) ? 0 : +!temp)\n        } else if ('[' === c) {\n            stack = []\n            fstack.push(stack)\n        } else if ('|' === c) {\n            temp = stack.pop()\n            fstack.push(temp)\n            stack = temp\n        } else if (']' === c) {\n            if (fstack.length <= 2) fstack.unshift([])\n            stack = fstack.at(-2)\n            stack.push(fstack.pop())\n        } else if ('(' === c) {\n            temp = \"\"\n            temp2 = 1\n            c = code[++i]\n            while (true) {\n                if ('(' === c) ++temp2\n                else if (')' === c) --temp2\n                if (!c || !temp2) break\n                temp += c\n                c = code[++i]\n            }\n            stack.push(temp)\n        } else if ('.' === c) {\n            temp = stack.at(-1)\n            output(typeof temp == \"string\" ? temp : formatting(temp))\n        } else if ('\\\\' === c) {\n            if (stack.length >= 2) {\n                temp = stack.pop()\n                temp2 = stack.pop()\n                stack.push(temp, temp2)\n            }\n        } else if ('&' === c) {\n            if (stack.length >= 2)\n                stack.unshift(stack.pop())\n        } else if (':' === c) {\n            if (stack.length >= 1) {\n                temp = stack.pop()\n                stack.push(temp, temp)\n            }\n        } else if ('_' === c) {\n            stack.pop()\n        } else if ('=' === c) {\n            temp = stack.pop()\n            var_dict[temp] = stack.at(-1)\n        } else if ('^' === c) {\n            temp = stack.pop()\n            temp2 = var_dict[temp]\n            stack.push(typeof temp2 == \"function\" ? temp + \"@\" : temp2)\n        } else if ('@' === c) {\n            await exec_what(fstack, var_dict, output, { dead_loop_check })\n            stack = fstack.at(-1)\n        } else if ('>' === c) {\n            stack.push(stack.splice(-stack.pop()))\n        } else if ('<' === c) {\n            stack.push(...stack.pop())\n        } else if ('{' === c) {\n            temp = stack.pop()\n            if (!(Number.isNaN(temp) || temp)) {\n                temp = 1\n                while (c && temp) {\n                    c = code[++i]\n                    if ('{' === c) ++temp\n                    else if ('}' === c) --temp\n                }\n            }\n        } else if ('}' === c) {\n            temp = stack.pop()\n            if (Number.isNaN(temp) || temp) {\n                temp = -1\n                while (c && temp) {\n                    c = code[--i]\n                    if ('{' === c) ++temp\n                    else if ('}' === c) --temp\n                }\n            }\n        } else if ('!' === c) {\n            temp = 1\n            while ('!' === code[++i]) temp++\n            c = code[--i]\n            while (c && temp) {\n                c = code[++i]\n                if ('{' === c) ++temp\n                else if ('}' === c) --temp\n            }\n        } else if (\"#\" === c) {\n            temp = stack.pop()\n            stack.push(await stack.at(-1).reduce(async (memo : any, x : any) => (\n                [...await memo, await exec_what([stack.concat([x, temp])], var_dict, output, { dead_loop_check })]\n            ), []))\n        } else if (\",\" === c) {\n            temp = stack.pop()\n            stack.push(stack.at(-1).slice(temp)[0])\n        } else if (\";\" === c) {\n            temp = stack.pop()\n            temp2 = stack.pop()\n            if ([undefined, +stack.at(-1).length].includes(temp2) || Number.isNaN(temp2)) {\n                stack.at(-1).push(temp)\n            } else {\n                temp2 = +temp2 || 0\n                if (temp2 < 0) temp2 += stack.at(-1).length\n                if (temp2 >= 0) stack.at(-1).fill(temp, temp2, temp2 + 1)\n            }\n        } else if (\"$\" === c) {\n            temp = stack.pop()\n            stack.at(-1).splice(temp, 1)\n        }\n        //console.log(stack)\n        temp = void 0, temp2 = void 0\n    }\n    return stack.at(-1)\n}\n"],
  "mappings": "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",
  "names": ["op", "x", "y", "relize", "default_var_dict", "i", "formatting", "repr_formatting", "s", "v", "o", "memo", "exec_what", "temp", "e", "z", "need_svo", "need_fstack", "is_valid_paren_string", "depth", "c", "fstack", "var_dict", "output", "dead_loop_check", "stack", "temp2", "temp3", "eval_what", "run_what", "code"]
}
